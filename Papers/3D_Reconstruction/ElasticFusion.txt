ElasticFusion: Dense SLAM Without A Pose Graph
Thomas Whelan*, Stefan Leutenegger*, Renato F. Salas-Moreno†, Ben Glocker† and Andrew J. Davison*
*Dyson Robotics Laboratory at Imperial College, Department of Computing, Imperial College London, UK
†Department of Computing, Imperial College London, UK
{t.whelan,s.leutenegger,r.salas-moreno10,b.glocker,a.davison}@imperial.ac.uk
Abstract—We present a novel approach to real-time dense
visual SLAM. Our system is capable of capturing comprehensive
dense globally consistent surfel-based maps of room scale environments explored using an RGB-D camera in an incremental
online fashion, without pose graph optimisation or any postprocessing steps. This is accomplished by using dense frame-tomodel camera tracking and windowed surfel-based fusion coupled with frequent model refinement through non-rigid surface
deformations. Our approach applies local model-to-model surface
loop closure optimisations as often as possible to stay close to the
mode of the map distribution, while utilising global loop closure
to recover from arbitrary drift and maintain global consistency.
I. INTRODUCTION
In dense 3D SLAM, a space is mapped by fusing the data
from a moving sensor into a representation of the continuous
surfaces it contains, permitting accurate viewpoint-invariant
localisation as well as offering the potential for detailed
semantic scene understanding. However, existing dense SLAM
methods suitable for incremental, real-time operation struggle
when the sensor makes movements which are both of extended
duration and often criss-cross loop back on themselves. Such
a trajectory is typical if a non-expert person with a handheld
depth camera were to scan in a room with a loopy “painting”
motion; or would also be characteristic of a robot aiming to
explore and densely map an unknown environment.
SLAM algorithms have too often targeted one of two extremes; (i) either extremely loopy motion in a very small area
(e.g. MonoSLAM [4] or KinectFusion [15]) or (ii) “corridorlike” motion on much larger scales but with fewer loop
closures (e.g. McDonald et al. [13] or Whelan et al. [25]). In
sparse feature-based SLAM, it is well understood that loopy
local motion can be dealt with either via joint probabilistic
filtering [3], or in-the-loop joint optimisation of poses and
features (bundle adjustment) [11]; and that large scale loop
closures can be dealt with via partitioning of the map into
local maps or keyframes and applying pose graph optimisation
[12]. In fact, even in sparse feature-based SLAM there have
been relatively few attempts to deal with motion which is both
extended and extremely loopy, such as Strasdat et al.’s work
on double window optimisation [20].
With a dense vision frontend, the number of points matched
and measured at each sensor frame is much higher than
in feature-based systems (typically hundreds of thousands).
This makes joint filtering or bundle adjustment local optimisation computationally infeasible. Instead, dense frontends
Fig. 1: Comprehensive scan of an office containing over 4.5
million surfels captured in real-time.
have relied on alternation and effectively per-surface-elementindependent filtering [15, 9]. However, it has been observed in
the field of dense visual SLAM that the enormous weight of
data serves to overpower the approximations to joint filtering
which this assumes. This also raises the question as to whether
it is optimal to attach a dense frontend to a sparse pose graph
structure like its feature-based visual SLAM counterpart. Pose
graph SLAM systems primarily focus on optimising the camera trajectory, whereas our approach (utilising a deformation
graph) instead focuses on optimising the map.
Some examples of recent real-time dense visual SLAM
systems that utilise pose graphs include that of Whelan et
al. which parameterises a non-rigid surface deformation with
an optimised pose graph to perform occasional loop closures
in corridor-like trajectories [25]. This approach is known to
scale well but perform poorly given locally loopy trajectories
while being unable to re-use revisited areas of the map. The
DVO SLAM system of Kerl et al. applies keyframe-based
pose graph optimisation principles to a dense tracking frontend
but performs no explicit map reconstruction and functions off
of raw keyframes alone [10]. Meilland and Comport’s work
on unified keyframes utilises fused predicted 2.5D keyframes
of mapped environments while employing pose graph optimisation to close large loops and align keyframes, although
not creating an explicit continuous 3D surface [14]. MRSMap
by Stuckler and Behnke registers octree encoded surfel maps ¨
together for pose estimation. After pose graph optimisation the
final map is created by merging key surfel views [21].
In our system we wish to move away from the focus on
Fig. 2: Example SLAM sequence with active model coloured by surface normal overlaid on the inactive model in greyscale; (i)
Initially all data is in the active model as the camera moves left; (ii) As time goes on, the area of map not seen recently is set
to inactive. Note the highlighted area; (iii) The camera revisits the inactive area of the map, closing a local loop and registering
the surface together. The previously highlighted inactive region then becomes active; (iv) Camera exploration continues to the
right and more loops are closed; (v) Continued exploration to new areas; (vi) The camera revisits an inactive area but has
drifted too far for a local loop closure; (vii) Here the misalignment is apparent, with red arrows visualising equivalent points
from active to inactive; (viii) A global loop closure is triggered which aligns the active and inactive model; (ix) Exploration
to the right continues as more local loop closures are made and inactive areas reactivated; (x) Final full map coloured with
surface normals showing underlying deformation graph and sampled camera poses in global loop closure database.
pose graphs originally grounded in sparse methods and move
towards a more map-centric approach that more elegantly
fits the model-predictive characteristics of a typical dense
frontend. For this reason we also put a strong emphasis on
hard real-time operation in order to always be able to use surface prediction every frame for true incremental simultaneous
localisation and dense mapping. This is in contrast to other
dense reconstruction systems which don’t strictly perform both
tracking and mapping in real-time [18, 19]. The approach we
have developed in this paper is closer to the offline dense scene
reconstruction system of Zhou et al. than a traditional SLAM
system in how it places much more emphasis on the accuracy
of the reconstructed map over the estimated trajectory [27].
In our map-centric approach to dense SLAM we attempt to
apply surface loop closure optimisations early and often, and
therefore always stay near to the mode of the map distribution.
This allows us to employ a non-rigid space deformation of the
map using a sparse deformation graph embedded in the surface
itself rather than a probabilistic pose graph which is rigidly
transforming independent keyframes. As we show in our
evaluation of the system in Section VII, this approach to dense
SLAM achieves state-of-the-art performance with trajectory
estimation results on par with or better than existing dense
SLAM systems that utilise pose graph optimisation. We also
demonstrate the capability to capture comprehensive dense
scans of room scale environments involving complex loopy
camera trajectories as well as more traditional “corridor-like”
forward facing trajectories. At the time of writing we believe
our real-time approach to be the first of its kind to; (i) use
photometric and geometric frame-to-model predictive tracking
in a fused surfel-based dense map; (ii) perform dense modelto-model local surface loop closures with a non-rigid space
deformation and (iii) utilise a predicted surface appearancebased place recognition method to resolve global surface loop
closures and hence capture globally consistent dense surfelbased maps without a pose graph.
II. APPROACH OVERVIEW
We adopt an architecture which is typically found in realtime dense visual SLAM systems that alternates between
tracking and mapping [15, 25, 9, 8, 2, 16]. Like many dense
SLAM systems ours makes significant use of GPU programming. We mainly use CUDA to implement our tracking
reduction process and the OpenGL Shading Language for view
prediction and map management. Our approach is grounded in
estimating a dense 3D map of an environment explored with
a standard RGB-D camera1 in real-time. In the following, we
summarise the key elements of our method.
1) Estimate a fused surfel-based model of the environment.
This component of our method is inspired by the surfelbased fusion system of Keller et al. [9], with some
notable differences outlined in Section III.
2) While tracking and fusing data in the area of the
model most recently observed (active area of the model),
segment older parts of the map which have not been
observed in a period of time δt into the inactive area of
the model (not used for tracking or data fusion).
3) Every frame, attempt to register the portion of the active
model within the current estimated camera frame with
the portion of the inactive model underlaid within the
same frame. If registration is successful, a loop has
been closed to the older inactive model and the entire
model is non-rigidly deformed into place to reflect this
registration. The inactive portion of the map which
caused this loop closure is then reactivated to allow
1
Such as the Microsoft Kinect or ASUS Xtion Pro Live.
tracking and surface fusion (including surfel culling) to
take place between the registered areas of the map.
4) For global loop closure, add predicted views of the
scene to a randomised fern encoding database [6]. Each
frame, attempt to find a matching predicted view via this
database. If a match is detected, register the views together and check if the registration is globally consistent
with the model’s geometry. If so, reflect this registration
in the map with a non-rigid deformation, bringing the
surface into global alignment.
Figure 2 provides a visualisation of the outlined main steps
of our approach. In the following section we describe our fused
map representation and method for predictive tracking.
III. FUSED PREDICTED TRACKING
Our scene representation is an unordered list of surfels
M (similar to the representation used by Keller et al. [9]),
where each surfel Ms has the following attributes; a position
p ∈ R3, normal n ∈ R3, colour c ∈ N3, weight w ∈ R,
radius r ∈ R, initialisation timestamp t0 and last updated
timestamp t. The radius of each surfel is intended to represent
the local surface area around a given point while minimising
visible holes, computed as done by Salas-Moreno et al. [17].
Our system follows the same rules as described by Keller
et al. for performing surfel initialisation and depth map
fusion (where surfel colours follow the same moving average
scheme), however when using the map for pose estimation our
approach differs in two ways; (i) instead of only predicting
a depth map via splatted rendering for geometric frame-tomodel tracking, we additionally predict a full colour splatted
rendering of the model surfels to perform photometric frameto-model tracking; (ii) we define a time window threshold δt
which divides M into surfels which are active and inactive.
Only surfels which are marked as active model surfels are used
for camera pose estimation and depth map fusion. A surfel
in M is declared as inactive when the time since that surfel
was last updated (i.e. had a raw depth measurement associated
with it for fusion) is greater than δt. In the following, we
describe our method for joint photometric and geometric pose
estimation from a splatted surfel prediction.
We define the image space domain as Ω ⊂ N2, where
an RGB-D frame is composed of a depth map D of depth
pixels d : Ω → R and a colour image C of colour pixels
c : Ω → N3. We also compute a normal map for every
depth map as necessary using central difference. We define
the 3D back-projection of a point u ∈ Ω given a depth
map D as p(u, D) = K−1ud(u), where K is the camera
intrinsics matrix and u the homogeneous form of u. We also
specify the perspective projection of a 3D point p = [x, y, z]⊤
(represented in camera frame F
−→C) as u = π(Kp), where
π(p) = (x/z, y/z)⊤ denotes the dehomogenisation operation.
The intensity value of a pixel u ∈ Ω given a colour image
C with colour c(u) = [c1, c2, c3]⊤ is defined as I(u, C) =
(c1 + c2 + c3)/3. For each input frame at time t we estimate
the global pose of the camera Pt (w.r.t. a global frame F
−→G)
by registering the current live depth map and colour image
captured by the camera with the surfel-splatted predicted
depth map and colour image of the active model from the
previous pose estimate. All camera poses are represented with
a transformation matrix where:
Pt =  0 0 0 1 Rt tt  ∈ SE3, (1)
with rotation Rt ∈ SO3 and translation tt ∈ R3.
A. Geometric Pose Estimation
Between the current live depth map Dtl and the predicted
active model depth map from the last frame Dˆta−1 we aim to
find the motion parameters ξ that minimise the cost over the
point-to-plane error between 3D back-projected vertices:
E
icp = X
k
vk − exp(ξˆ)Tvtk · nk2 , (2)
where vtk is the back-projection of the k-th vertex in Dtl, vk
and nk are the corresponding vertex and normal represented in
the previous camera coordinate frame (at time step t − 1). T
is the current estimate of the transformation from the previous
camera pose to the current one and exp(ξˆ) is the matrix
exponential that maps a member of the Lie algebra se3 to
a member of the corresponding Lie group SE3. Vertices are
associated using projective data association [15].
B. Photometric Pose Estimation
Between the current live colour image Ctl and the predicted
active model colour from the last frame Cˆta−1 we aim to
find the motion parameters ξ that minimise the cost over the
photometric error (intensity difference) between pixels:
E
rgb = X
u∈Ω
I(u, Ctl) − I π(K exp(ξˆ)Tp(u, Dtl)), Cˆta−12 ,
(3)
where as above T is the current estimate of the transformation
from the previous camera pose to the current one. Note that
Equations 2 and 3 omit conversion between 3-vectors and
their corresponding homogeneous 4-vectors (as needed for
multiplications with T) for simplicity of notation.
C. Joint Optimisation
At this point we wish to minimise the joint cost function:
Etrack = Eicp + wrgbErgb, (4)
with w
rgb = 0.1 in line with related work [8, 25]. For this we
use the Gauss-Newton non-linear least-squares method with
a three level coarse-to-fine pyramid scheme. To solve each
iteration we calculate the least-squares solution:
arg min
ξ
kJξ + rk2 2 , (5)
to yield an improved camera transformation estimate:
T′ = exp(ξˆ)T (6)
ξˆ =  0 0 0 0 [ω]× x  , (7)
with ξ = [ω⊤x⊤]⊤, ω, ∈ R3 and x ∈ R3.
Blocks of the combined measurement Jacobian J and residual r can be populated (while being weighted according to
wrgb) and solved with a highly parallel tree reduction in
CUDA to produce a 6×6 system of normal equations which is
then solved on the CPU by Cholesky decomposition to yield ξ.
The outcome of this process is an up to date camera pose
estimate Pt = TPt−1 which brings the live camera data Dtl
and Ctl into strong alignment with the current active model
(and hence ready for fusion with the active surfels in M).
IV. DEFORMATION GRAPH
In order to ensure local and global surface consistency in
the map we reflect successful surface loop closures in the set
of surfels M. This is carried out by non-rigidly deforming
all surfels (both active and inactive) according to surface
constraints provided by either of the loop closure methods later
described in Sections V and VI. We adopt a space deformation
approach based on the embedded deformation technique of
Sumner et al. [23].
A deformation graph is composed of a set of nodes and
edges distributed throughout the model to be deformed. Each
node Gn has a timestamp Gtn0, a position Ggn ∈ R3 and set
of neighbouring nodes N(Gn). The neighbours of each node
make up the (directed) edges of the graph. A graph is connected up to a neighbour count k such that ∀n, |N(Gn)| = k.
We use k = 4 in all of our experiments. Each node also
stores an affine transformation in the form of a 3 × 3 matrix
GRn and a 3×1 vector Gtn, initialised by default to the identity
and (0, 0, 0)⊤ respectively. When deforming a surface, the GRn
and Gtn parameters of each node are optimised according to
surface constraints, which we later describe in Section IV-C.
In order to apply a deformation graph to the surface, each
surfel Ms identifies a set of influencing nodes in the graph
I(Ms, G). The deformed position of a surfel is given by:
Mˆs
p = φ(Ms) = X
n∈I(Ms,G)
w
n(Ms)GRn (Ms p − Ggn) + Ggn + Gtn,
(8)
while the deformed normal of a surfel is given by:
Mˆs
n = X
n∈I(Ms,G)
w
n(Ms)GRn −1⊤Ms n, (9)
where wn(Ms) is a scalar representing the influence node Gn
has on surfel Ms, summing to a total of 1 when n = k:
w
n(Ms) = (1 − Ms p − Ggn 2 /dmax)2. (10)
Here d
max is the Euclidean distance to the k + 1-nearest node
of Ms. In the following we describe our method for sampling
the deformation graph G from the set of surfels M along with
our method for determining graph connectivity.
A. Construction
Each frame a new deformation graph for the set of surfels
M is constructed, since it is computationally cheap and
simpler than incrementally modifying an existing one. We
Fig. 3: Temporal deformation graph connectivity before loop
closure. The top half shows a mapping sequence where the
camera first maps left to right over a desk area and then back
across the same area. Given the windowed fusion process it
appears that the map and hence deformation graph is tangled
up in itself between passes. However, observing the bottom
half of the figure where the vertical dimension has been
artificially stretched by the initialisation times Mt0 and Gt0 of
each surfel and graph node respectively, it is clear that multiple
passes of the map are disjoint and free to be aligned.
initialise a new deformation graph G each frame with node positions set to surfel positions (Ggn = Ms p) and node timestamps
set to surfel initialisation timestamps (Gtn0 = Ms t0) sampled
from M using systematic sampling such that |G| ≪ |M|.
Note that this sampling is uniformly distributed over the
population, causing the spatial density of G to mirror that
of M. The set G is also ordered over n on Gtn0 such that
∀n, Gtn0 ≥ Gtn0−1, Gtn0−2, . . . , Gt00. To compute the connectivity
of the graph we use this initialisation time ordering of G
to connect nodes sequentially up to the neighbour count k,
defining N(Gn) = {Gn±1, Gn±2, . . . , Gn± k2 }. This method is
computationally efficient (compared to spatial approaches [23,
1]) but more importantly prevents temporally uncorrelated
areas of the surface from influencing each other (i.e. active
and inactive areas), as shown in Figure 3. Note that in the
case where n ± k
2 is less than zero or greater than |G|
we connect the graph either forwards or backwards from
the bound. For example, N(G0) = {G1, G2, . . . , Gk} and
N(G|G|) = {G|G|−1, G|G|−2, . . . , G|G|−k}. Next we describe
how to apply the deformation graph to the map of surfels.
B. Application
In order to apply the deformation graph after optimisation
(detailed in the next section) to update the map, the set of
nodes which influence each surfel Ms must be determined.
In tune with the method in the previous section a temporal
association is chosen, similar to the approach taken by Whelan
et al. [25]. The algorithm which implements I(Ms, G) and
applies the deformation graph G to a given surfel is listed
in Algorithm 1. When each surfel is deformed, the full set of
deformation nodes is searched for the node which is closest in
time. The solution to this L1-norm minimisation is actually a
binary search over the set G as it is already ordered. From
here, other nodes nearby in time are collected and the knearest nodes (in the Euclidean distance sense) are selected
as I(Ms, G). Finally the weights for each node are computed
as in Equation 10 and the transformations from Equations 8
and 9 are applied. All other attributes of the updated surfel
Mˆ s are copied from Ms.
Algorithm 1: Deformation Graph Application
Input: Ms surfel to be deformed
G set of deformation nodes
α number of nodes to explore
Output: Mˆ s deformed surfel
do
// Find closest node in time
c ← arg min
i
Ms t0 − Gti0
1
// Gather set of temporally nearby nodes
I ← ∅
for i ← −α/2 to α/2 do
Ii+α/2 ← c + i
sort by euclidean distance(I, G, Ms p)
// Take closest k as influencing nodes
I(Ms, G) ← I0→k−1
// Compute weights
h ← 0
d
max ← Ms p − GgIk
2
for n ∈ I(Ms, G) do
w
n(Ms) ← (1 − Ms p − Ggn 2 /dmax)2
h ← h + wn(Ms)
// Apply transformations
Mˆs
p = Pn∈I(Ms,G) w
n
(Ms)
h GRn (Ms p − Ggn) + Ggn + Gtn
Mˆs
n = Pn∈I(Ms,G) w
n
(Ms)
h GRn −1⊤Ms n
C. Optimisation
Given a set of surface correspondences Q (later expanded
upon in Sections V and VI) the parameters of the deformation graph can be optimised to reflect a surface registration
in the surfel model M. An element Qp ∈ Q is a tuple
Qp = (Qp d; Qp s; Qp d
t
; Qp s
t) which contains a pair of points
representing a destination position Qp d ∈ R3 and a source
position Qp s ∈ R3 which should reach the destination upon
deformation. The timestamps of each point are also stored in
Qp as Qp d
t
and Qp s
t respectively. We use four cost functions
over the deformation graph akin to those defined by Sumner
et al. [23]. The first maximises rigidity in the deformation:
Erot = X
l
GRl ⊤GRl − I 2
F
, (11)
using the Frobenius-norm. The second is a regularisation term
that ensures a smooth deformation across the graph:
E
reg = X
l
X
n∈N (Gl)
GRl (Ggn − Ggl ) + Ggl + Gtl − (Ggn + Gtn) 2
2
(12)
The third is a constraint term that minimises the error on the
set of position constraints Q, where φ(Qp s) is the result of
applying Equation 8 to Qp s:
E
con = X
p
kφ(Qp s) − Qp dk2 2 (13)
Note that in order to apply Equation 8 to Qp s we must compute
I(Qp s, G) and subsequently wn(Qp s). For this we use the same
algorithm as described in Algorithm 1 to deform the position
only, using Qp s (inclusive of timestamp Qp st) in place of Ms.
In practice Qp st will always be the timestamp of a surfel within
the active model while Qp d
t
will be the timestamp of a surfel
within the inactive model. The temporal parameterisation of
the surface we are using allows multiple passes of the same
surface to be non-rigidly deformed into alignment allowing
mapping to continue and new data fusion into revisited areas
of the map. Given this, the final cost function “pins” the
inactive area of the model in place ensuring that we are
always deforming the active area of the model into the inactive
coordinate system:
E
pin = X
p
kφ(Qp d) − Qp dk2 2 (14)
As above we use Algorithm 1 to compute φ(Qp d), using Qp d
in place of Ms. The final total cost function is defined as:
E
def = wrotErot + wregEreg + wconEcon + wconEpin (15)
With wrot = 1, wreg = 10 and wcon = 100 (in line with
related work [23, 1, 25]) we minimise this total cost with
respect to GRn and Gtn over all n using the iterative GaussNewton algorithm. The Jacobian matrix in this problem is
sparse and as a result we use sparse Cholesky factorisation
to efficiently solve the system on the CPU. From here the
deformation graph G is uploaded to the GPU for application
to the entire surfel map as described in Section IV-B.
V. LOCAL LOOP CLOSURE
To ensure local surface consistency throughout the map our
system closes many small loops with the existing map as those
areas are revisited. As shown in Figure 2, we fuse into the
active area of the model while gradually labeling surfels that
have not been seen in a period of time δt as inactive. The
inactive area of the map is not used for live frame tracking
and fusion until a loop is closed between the active model
and inactive model, at which point the matched inactive area
becomes active again. This has the advantage of continuous
frame-to-model tracking and also model-to-model tracking
which provides viewpoint-invariant local loop closures.
We divide the set of surfels in our map M into two disjoint
sets Θ and Ψ, such that given the current frame timestamp t for
each surfel in the map Ms ∈ Θ if t −Ms t < δt and Ms ∈ Ψ
if t−Ms t ≥ δt, making Θ the active set and Ψ the inactive set.
In each frame if a global loop closure has not been detected
(described in the following section), we attempt to compute
a match between Θ and Ψ. This is done by registering the
predicted surface renderings of Θ and Ψ from the latest pose
estimate Pt, denoted Dta, Cta and Dti, Cti respectively. This pair
of model views is registered together using the same method
as described in Section III. The output of this process will be
a relative transformation matrix H ∈ SE3 from Θ to Ψ which
brings the two predicted surface renderings into alignment.
In order to check the quality of this registration and decide
whether or not to carry out a deformation, we inspect the final
condition of the Gauss-Newton optimisation used to align the
two views. The residual cost Etrack from Equation 4 must be
sufficiently small, while the number of inlier measurements
used must be above a minimum threshold. We also inspect
the eigenvalues of the covariance of the system (approximated
by the Hessian as Σ = (J⊤J)−1) by; σi(Σ) < µ for i =
{1, . . . , 6}, where σi(Σ) is the i-th eigenvalue of Σ and µ a
sufficiently conservative threshold.
If a high quality alignment has been achieved, we produce
a set of surface constraints Q which are fed into the deformation graph optimisation described in Section IV to align
the surfels in Θ with those in Ψ. To do this we also require
the initialisation timestamps Ψt0 of each surfel splat used to
render Dti. These are rendered as Tti and are necessary to
correctly constrain the deformation between the active model
and inactive model. We uniformly sample a set of pixel
coordinates U ⊂ Ω to compute the set Q. For each pixel
u ∈ U we populate a constraint:
Qp = ((HPt)p(u, Dta); Ptp(u, Dta); Tti(u); t). (16)
After the deformation has occurred a new up to date camera
pose is resolved as Pˆt = HPt. At this point the set of
surfels which were part of the alignment are reactivated to
allow live camera tracking and fusion with the existing active
surfels. An up to date prediction of the active model depth
must be rendered to reflect the deformation for the depth test
for inactive surfels, computed as D˜ta. For each surfel Ms:
Ms t =

t if π(KPˆ− t 1Ms p) ∈ Ω
and (KPˆ− t 1Ms p)z . D˜ta(π(KPˆ− t 1Ms p)),
Ms t else.
(17)
The process described in this section brings active areas
of the model into strong alignment with inactive areas of the
model to achieve tight local surface loop closures. In the event
of the active model drifting too far from the inactive model for
local alignment to converge, we resort to an appearance-based
global loop closure method to bootstrap a surface deformation
which realigns the active model with the underlying inactive
model for tight global loop closure and surface global consistency. This is described in the following section.
VI. GLOBAL LOOP CLOSURE
We utilise the randomised fern encoding approach for
appearance-based place recognition [6]. Ferns encode an RGBD image as a string of codes made up of the values of
binary tests on each of the RGB-D channels in a set of fixed
pixel locations. The approach presented by Glocker et al.
includes an automatic method for fern database management
that avoids adding redundant views and non-discriminative
frames. This technique has been demonstrated to perform very
reliably in terms of computational performance and viewpoint
recognition. Our implementation of randomised fern encoding
is identical to that of Glocker et al. with the difference that
instead of encoding and matching against raw RGB-D frames,
we use predicted views of the surface map once they are
aligned and fused with the live camera view. Parts of the
predicted views which are devoid of any mapped surface are
filled in using the live depth and colour information from the
current frame.
Each frame we maintain a fern encoded frame database E,
using the same process as originally specified by Glocker
et al. for fern encoding, frame harvesting and identification
of matching fern encodings [6]. As they suggest, we use a
downsampled frame size of 80 × 60. Each element Ei ∈ E
contains a number of attributes; a fern encoding string Efi, a
depth map EDi , a colour image ECi , a source camera pose EPi
and an initialisation time Eti. At the end of each frame we
add Dˆta and Cˆta (predicted active model depth and colour after
fusion filled in with Dtl and Ctl) to E if necessary. We also
query this database immediate after the initial frame-to-model
tracking step to determine if there is a global loop closure
required. If a matching frame Ei is found we perform a number
of steps to potentially globally align the surfel map.
Firstly, we attempt to align the matched frame with the
current model prediction. Similar to the previous section, this
involves utilising the registration process outlined in Section
III to bring Dta and Cta into alignment with EDi and ECi ,
including inspection of the final condition of the optimisation.
If successful, a relative transformation matrix H ∈ SE3 which
brings the current model prediction into alignment with the
matching frame is resolved. From here, as in the previous
section, we populate a set of surface constraints Q to provide
as input to the deformation, where each u is a randomly
sampled fern pixel location (lifted into full image resolution):
Qp = ((HEPi )p(u, Dta); Ptp(u, Dta); Eti; t). (18)
Note Qp d which incorporates the difference in the estimated
point position given by the alignment and the known actual
global point position given by EPi . From here, the deformation
System fr1/desk fr2/xyz fr3/office fr3/nst
DVO SLAM 0.021m 0.018m 0.035m 0.018m
RGB-D SLAM 0.023m 0.008m 0.032m 0.017m
MRSMap 0.043m 0.020m 0.042m 2.018m
Kintinuous 0.037m 0.029m 0.030m 0.031m
Frame-to-model 0.022m 0.014m 0.025m 0.027m
ElasticFusion 0.020m 0.011m 0.017m 0.016m
TABLE I: Comparison of ATE RMSE on the evaluated real
world datasets of Sturm et al. [22].
cost from Equations 11-15 is computed and evaluated to
determine if the proposed deformation is consistent with the
map’s geometry. We are less likely to accept unreliable fern
matching triggered deformations as they operate on a much
coarser scale than the local loop closure matches. If Econ
is too small the deformation is likely not required and the
loop closure is rejected (i.e. it should be detected and applied
as a local loop closure). Otherwise, the deformation graph
is optimised and the final state of the Gauss-Newton system
is analysed to determine if it should be applied. If after
optimisation Econ is sufficiently small while over all Edef
is also small, the loop closure is accepted and the deformation
graph G is applied to the entire set of surfels M. At this
point the current pose estimate is also updated to Pˆ t = HEPi .
Unlike in the previous section the set of active and inactive
surfels is not revised at this point. This is for two main reasons;
(i) correct global loop closures bring the active and inactive
regions of map into close enough alignment to trigger a local
loop closure on the next frame and (ii) this allows the map
to recover from potentially incorrect global loop closures. We
also have the option of relying on the fern encoding database
for global relocalisation if camera tracking ever fails (however
this was not encountered in any evaluated datasets).
VII. EVALUATION
We evaluate the performance of our system both quantitatively and qualitatively in terms of trajectory estimation, surface reconstruction accuracy and computational performance.
A. Trajectory Estimation
To evaluate the trajectory estimation performance of our approach we test our system on the RGB-D benchmark of Sturm
et al. [22]. This benchmark provides synchronised ground truth
poses for an RGB-D sensor moved through a scene, captured
with a highly precise motion capture system. In Table I we
compare our system to four other state-of-the-art RGB-D
based SLAM systems; DVO SLAM [10], RGB-D SLAM [5],
MRSMap [21] and Kintinuous [25]. We also provide benchmark scores for our system if all deformations are disabled
and only frame-to-model tracking is used. We use the absolute
trajectory (ATE) root-mean-square error metric (RMSE) in
our comparison, which measures the root-mean-square of the
Euclidean distances between all estimated camera poses and
the ground truth poses associated by timestamp [22]. These
results show that our trajectory estimation performance is on
par with or better than existing state-of-the-art systems that
Fig. 4: Orthogonal frontal view heat maps showing reconstruction error on the kt0 dataset. Points more than 0.1m from
ground truth have been removed for visualisation purposes.
System kt0 kt1 kt2 kt3
DVO SLAM 0.104m 0.029m 0.191m 0.152m
RGB-D SLAM 0.026m 0.008m 0.018m 0.433m
MRSMap 0.204m 0.228m 0.189m 1.090m
Kintinuous 0.072m 0.005m 0.010m 0.355m
Frame-to-model 0.497m 0.009m 0.020m 0.243m
ElasticFusion 0.009m 0.009m 0.014m 0.106m
TABLE II: Comparison of ATE RMSE on the evaluated
synthetic datasets of Handa et al. [7].
rely on a pose graph optimisation backend. Interestingly our
frame-to-model only results are also comparable in performance, whereas a uniform increase in accuracy is achieved
when active to inactive model deformations are used, proving
their efficacy in trajectory estimation. Only on fr3/nst does
a global loop closure occur. Enabling local loops alone on
this dataset results in an error of 0.022m, while only enabling
global loops results in an error of 0.023m.
B. Surface Estimation
We evaluate the surface reconstruction results of our approach on the ICL-NUIM dataset of Handa et al. [7]. This
benchmark provides ground truth poses for a camera moved
through a synthetic environment as well as a ground truth 3D
model which can be used to evaluate surface reconstruction
accuracy. We evaluate our approach on all four trajectories in
the living room scene (including synthetic noise) providing
surface reconstruction accuracy results in comparison to the
same SLAM systems listed in Section VII-A. We also include
trajectory estimation results for each dataset. Tables II and III
System kt0 kt1 kt2 kt3
DVO SLAM 0.032m 0.061m 0.119m 0.053m
RGB-D SLAM 0.044m 0.032m 0.031m 0.167m
MRSMap 0.061m 0.140m 0.098m 0.248m
Kintinuous 0.011m 0.008m 0.009m 0.150m
Frame-to-model 0.098m 0.007m 0.011m 0.107m
ElasticFusion 0.007m 0.007m 0.008m 0.028m
TABLE III: Comparison of surface reconstruction accuracy
results on the evaluated synthetic datasets of Handa et al. [7].
Quantities shown are the mean distances from each point to
the nearest surface in the ground truth 3D model.
(i) (ii) (iii)
Fig. 5: Qualitative datasets; (i) A comprehensive scan of a
copy room; (ii) A loopy large scan of a computer lab; (iii)
A comprehensive scan of a twin bed hotel room (note that
the actual room is not rectilinear). To view small details we
recommend either using the digital zoom function in a PDF
reader or viewing of our accompanying videos2.
Name (Fig.) Copy (5i) Lab (5ii) Hotel (5iii) Office (1)
Frames 5490 6533 7725 5000
Surfels 4.4×106 3.5×106 4.1×106 4.8×106
Graph nodes 351 282 328 386
Fern frames 582 651 325 583
Local loops 15 13 11 17
Global loops 1 4 1 0
TABLE IV: Statistics on qualitative datasets.
summarise our trajectory estimation and surface reconstruction
results. Note on kt1 the camera never revisits previously
mapped portions of the map, making the frame-to-model
and ElasticFusion results identical. Additionally, only the kt3
sequence triggers a global loop closure in our approach. This
yields a local loop only ATE RMSE result of 0.234m and a
global loop only ATE RMSE result of 0.236m. On surface
reconstruction, local loops only scores 0.099m and global
loops only scores 0.103m. These results show that again our
trajectory estimation performance is on par with or better than
existing approaches. It is also shown that our surface reconstruction results are superior to all other systems. Figure 4
shows the reconstruction error of all evaluated systems on kt0.
We also present a number of qualitative results on datasets
captured in a handheld manner demonstrating system versatility. Statistics for each dataset are listed in Table IV. The Copy
dataset contains a comprehensive scan of a photocopying room
with many local loop closures and a global loop closure at one
point to resolve global consistency. This dataset was made
available courtesy of Zhou and Koltun [26]. The Lab dataset
contains a very loopy trajectory around a large office environment with many global and local loop closures. The Hotel
dataset follows a comprehensive scan of a non-rectilinear hotel
room with many local loop closures and a single global loop
closure to resolve final model consistency. Finally the Office
dataset contains a comprehensive scan of a complete office
with many local loop closures avoiding the need for any global
loop closures for model consistency. We recommend viewing
of our accompanying videos to more clearly visualise and
Milliseconds
15
20
25
30
35
40
45
50
Millions of Surfels
5 4 3 2 1 0
Frame
0 1,000 2,000 3,000 4,000 5,000 6,000 7,000
Time
Surfels
Fig. 6: Frame time vs. number of surfels on the Hotel dataset.
understand the capabilities of our approach2.
C. Computational Performance
To analyse the computational performance of the system we
provide a plot of the average frame processing time across the
Hotel sequence. The test platform was a desktop PC with an
Intel Core i7-4930K CPU at 3.4GHz, 32GB of RAM and an
nVidia GeForce GTX 780 Ti GPU with 3GB of memory. As
shown in Figure 6 the execution time of the system increases
with the number of surfels in the map, with an overall average
of 31ms per frame scaling to a peak average of 45ms implying
a worst case processing frequency of 22Hz. This is well
within the widely accepted minimum frequencies for fused
dense SLAM algorithms [24, 17, 2, 9], and as shown in our
qualitative results more than adequate for real-time operation.
VIII. CONCLUSION
We have presented a novel approach to the problem of
dense visual SLAM that performs time windowed surfelbased dense data fusion in combination with frame-to-model
tracking and non-rigid deformation. Our main contribution in
this paper is to show that by incorporating many small local
model-to-model loop closures in conjunction with larger scale
global loop closures we are able to stay close to the mode of
the distribution of the map and produce globally consistent
reconstructions in real-time without the use of pose graph
optimisation or post-processing steps. In our evaluation we
show that the use of frequent non-rigid map deformations
improve both the trajectory estimate of the camera and the
surface reconstruction quality. We also demonstrate the effectiveness of our approach in long scale occasionally looping
camera motions and more loopy comprehensive room scanning
trajectories. In future work we wish to address the problem of
map scalability beyond whole rooms and also investigate the
problem of dense globally consistent SLAM as t → ∞